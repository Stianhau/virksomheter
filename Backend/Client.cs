//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://data.brreg.no/enhetsregisteret/api";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Hent alle tjenester
        /// </remarks>
        /// <returns>Tjenester mot åpne data fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListTjenesterAsync()
        {
            return ListTjenesterAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent alle tjenester
        /// </remarks>
        /// <returns>Tjenester mot åpne data fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListTjenesterAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent alle enheter
        /// </remarks>
        /// <param name="size">Antall ønskede treff i response. Default verdi er 20. Max dypde (page*size) er 10 000.</param>
        /// <param name="page">Hvilken side som ønskes av resultatsettet. Default verdi er 0. Max dypde (page*size) er 10 000</param>
        /// <param name="navn">Filtrer på navn. Sammensatt søk på likhet. Resultat sorteres pr default etter score</param>
        /// <param name="sort">Sorter resultatsett på feltnavn. Merk at navn må sorteres på navn.norwegian</param>
        /// <param name="organisasjonsform">Filtrer på organisasjonsformkode. Kommaseparert liste.</param>
        /// <param name="naeringskode">Filtrer på næringskode. Valgfritt nivå. Kommaseparert liste.</param>
        /// <param name="kommunenummer">Filtrer på kommunenummer 4 siffer.</param>
        /// <param name="overordnetEnhet">Organisasjonsnummeret til overordnet enhet</param>
        /// <param name="fraRegistreringsdatoEnhetsregisteret">Filtrer på fra registreringsdato i Enhetsregisteret.</param>
        /// <param name="tilRegistreringsdatoEnhetsregisteret">Filtrer på til registreringsdato i Enhetsregisteret.</param>
        /// <param name="registrertIMvaregisteret">Filtrer på om enheten er registrert i Merverdiregisteret</param>
        /// <param name="konkurs">Filtrer på om enheten er registrert konkurs</param>
        /// <param name="fraAntallAnsatte">Filtrer på fra antall ansatte</param>
        /// <param name="tilAntallAnsatte">Filtrer på til antall ansatte</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enhetene.  Kommaseparert liste med organisasjonsnummer.</param>
        /// <param name="registrertIForetaksregisteret">Hvorvidt enheten er registrert i Foretaksregisteret</param>
        /// <param name="registrertIStiftelsesregisteret">Hvorvidt enheten er registrert i Stiftelsesregisteret</param>
        /// <param name="registrertIFrivillighetsregisteret">Hvorvidt enheten er registrert i Frivillighetsregisteret</param>
        /// <param name="frivilligRegistrertIMvaregisteret">Frivillig registrert i Merverdiavgiftsregisteret. Kommaseparert liste med beskrivelser.</param>
        /// <param name="underTvangsavviklingEllerTvangsopplosning">Hvorvidt enheten er registrert som underTvangsavvikling eller tvangsopplosning</param>
        /// <param name="underAvvikling">Hvorvidt enheten er registrert som underAvvikling</param>
        /// <param name="fraStiftelsesdato">Tidligste stiftelsesdato for enheten</param>
        /// <param name="tilStiftelsesdato">Seneste stiftelsesdato hos enheten</param>
        /// <param name="hjemmeside">Enhetens hjemmeside</param>
        /// <param name="institusjonellSektorkode">Enhetens institusjonelle sektorkode. Kommaseparert liste med sektorkoder på 4 siffer.</param>
        /// <param name="postadresse_kommunenummer">Kommunenummer til enhetens postadresse. Kommaseparert liste med kommunenummer på 4 siffer.</param>
        /// <param name="postadresse_postnummer">Postnummeret til enhetens postadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="postadresse_poststed">Poststedet til enhetens postadresse. Fritekst.</param>
        /// <param name="postadresse_landkode">Landkode til enhetens postadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="postadresse_adresse">Adresse til enhetens postadresse. Kommaseparert liste med adresser.</param>
        /// <param name="forretningsadresse_postnummer">Postnummer til enhetens forretningsadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="forretningsadresse_poststed">Poststedet til enhetens forretningsadresse. Fritekst.</param>
        /// <param name="forretningsadresse_landkode">Landkode til enhetens forretningsadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="forretningsadresse_adresse">Adresse til enhetens forretningsadresse. Kommaseparert liste med adresser.</param>
        /// <param name="sisteInnsendteAarsregnskap">Årstall for siste innsendte årsregnskap for enheten. Kommaseparert liste med årstall på 4 siffer</param>
        /// <returns>Enheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListEnheterAsync(int? size, int? page, string navn, string sort, string organisasjonsform, string naeringskode, string kommunenummer, string overordnetEnhet, string fraRegistreringsdatoEnhetsregisteret, string tilRegistreringsdatoEnhetsregisteret, bool? registrertIMvaregisteret, bool? konkurs, int? fraAntallAnsatte, int? tilAntallAnsatte, string organisasjonsnummer, bool? registrertIForetaksregisteret, bool? registrertIStiftelsesregisteret, bool? registrertIFrivillighetsregisteret, string frivilligRegistrertIMvaregisteret, bool? underTvangsavviklingEllerTvangsopplosning, bool? underAvvikling, string fraStiftelsesdato, string tilStiftelsesdato, string hjemmeside, string institusjonellSektorkode, string postadresse_kommunenummer, string postadresse_postnummer, string postadresse_poststed, string postadresse_landkode, string postadresse_adresse, string forretningsadresse_postnummer, string forretningsadresse_poststed, string forretningsadresse_landkode, string forretningsadresse_adresse, string sisteInnsendteAarsregnskap)
        {
            return ListEnheterAsync(size, page, navn, sort, organisasjonsform, naeringskode, kommunenummer, overordnetEnhet, fraRegistreringsdatoEnhetsregisteret, tilRegistreringsdatoEnhetsregisteret, registrertIMvaregisteret, konkurs, fraAntallAnsatte, tilAntallAnsatte, organisasjonsnummer, registrertIForetaksregisteret, registrertIStiftelsesregisteret, registrertIFrivillighetsregisteret, frivilligRegistrertIMvaregisteret, underTvangsavviklingEllerTvangsopplosning, underAvvikling, fraStiftelsesdato, tilStiftelsesdato, hjemmeside, institusjonellSektorkode, postadresse_kommunenummer, postadresse_postnummer, postadresse_poststed, postadresse_landkode, postadresse_adresse, forretningsadresse_postnummer, forretningsadresse_poststed, forretningsadresse_landkode, forretningsadresse_adresse, sisteInnsendteAarsregnskap, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent alle enheter
        /// </remarks>
        /// <param name="size">Antall ønskede treff i response. Default verdi er 20. Max dypde (page*size) er 10 000.</param>
        /// <param name="page">Hvilken side som ønskes av resultatsettet. Default verdi er 0. Max dypde (page*size) er 10 000</param>
        /// <param name="navn">Filtrer på navn. Sammensatt søk på likhet. Resultat sorteres pr default etter score</param>
        /// <param name="sort">Sorter resultatsett på feltnavn. Merk at navn må sorteres på navn.norwegian</param>
        /// <param name="organisasjonsform">Filtrer på organisasjonsformkode. Kommaseparert liste.</param>
        /// <param name="naeringskode">Filtrer på næringskode. Valgfritt nivå. Kommaseparert liste.</param>
        /// <param name="kommunenummer">Filtrer på kommunenummer 4 siffer.</param>
        /// <param name="overordnetEnhet">Organisasjonsnummeret til overordnet enhet</param>
        /// <param name="fraRegistreringsdatoEnhetsregisteret">Filtrer på fra registreringsdato i Enhetsregisteret.</param>
        /// <param name="tilRegistreringsdatoEnhetsregisteret">Filtrer på til registreringsdato i Enhetsregisteret.</param>
        /// <param name="registrertIMvaregisteret">Filtrer på om enheten er registrert i Merverdiregisteret</param>
        /// <param name="konkurs">Filtrer på om enheten er registrert konkurs</param>
        /// <param name="fraAntallAnsatte">Filtrer på fra antall ansatte</param>
        /// <param name="tilAntallAnsatte">Filtrer på til antall ansatte</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enhetene.  Kommaseparert liste med organisasjonsnummer.</param>
        /// <param name="registrertIForetaksregisteret">Hvorvidt enheten er registrert i Foretaksregisteret</param>
        /// <param name="registrertIStiftelsesregisteret">Hvorvidt enheten er registrert i Stiftelsesregisteret</param>
        /// <param name="registrertIFrivillighetsregisteret">Hvorvidt enheten er registrert i Frivillighetsregisteret</param>
        /// <param name="frivilligRegistrertIMvaregisteret">Frivillig registrert i Merverdiavgiftsregisteret. Kommaseparert liste med beskrivelser.</param>
        /// <param name="underTvangsavviklingEllerTvangsopplosning">Hvorvidt enheten er registrert som underTvangsavvikling eller tvangsopplosning</param>
        /// <param name="underAvvikling">Hvorvidt enheten er registrert som underAvvikling</param>
        /// <param name="fraStiftelsesdato">Tidligste stiftelsesdato for enheten</param>
        /// <param name="tilStiftelsesdato">Seneste stiftelsesdato hos enheten</param>
        /// <param name="hjemmeside">Enhetens hjemmeside</param>
        /// <param name="institusjonellSektorkode">Enhetens institusjonelle sektorkode. Kommaseparert liste med sektorkoder på 4 siffer.</param>
        /// <param name="postadresse_kommunenummer">Kommunenummer til enhetens postadresse. Kommaseparert liste med kommunenummer på 4 siffer.</param>
        /// <param name="postadresse_postnummer">Postnummeret til enhetens postadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="postadresse_poststed">Poststedet til enhetens postadresse. Fritekst.</param>
        /// <param name="postadresse_landkode">Landkode til enhetens postadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="postadresse_adresse">Adresse til enhetens postadresse. Kommaseparert liste med adresser.</param>
        /// <param name="forretningsadresse_postnummer">Postnummer til enhetens forretningsadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="forretningsadresse_poststed">Poststedet til enhetens forretningsadresse. Fritekst.</param>
        /// <param name="forretningsadresse_landkode">Landkode til enhetens forretningsadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="forretningsadresse_adresse">Adresse til enhetens forretningsadresse. Kommaseparert liste med adresser.</param>
        /// <param name="sisteInnsendteAarsregnskap">Årstall for siste innsendte årsregnskap for enheten. Kommaseparert liste med årstall på 4 siffer</param>
        /// <returns>Enheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListEnheterAsync(int? size, int? page, string navn, string sort, string organisasjonsform, string naeringskode, string kommunenummer, string overordnetEnhet, string fraRegistreringsdatoEnhetsregisteret, string tilRegistreringsdatoEnhetsregisteret, bool? registrertIMvaregisteret, bool? konkurs, int? fraAntallAnsatte, int? tilAntallAnsatte, string organisasjonsnummer, bool? registrertIForetaksregisteret, bool? registrertIStiftelsesregisteret, bool? registrertIFrivillighetsregisteret, string frivilligRegistrertIMvaregisteret, bool? underTvangsavviklingEllerTvangsopplosning, bool? underAvvikling, string fraStiftelsesdato, string tilStiftelsesdato, string hjemmeside, string institusjonellSektorkode, string postadresse_kommunenummer, string postadresse_postnummer, string postadresse_poststed, string postadresse_landkode, string postadresse_adresse, string forretningsadresse_postnummer, string forretningsadresse_poststed, string forretningsadresse_landkode, string forretningsadresse_adresse, string sisteInnsendteAarsregnskap, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/enheter?");
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (navn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("navn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(navn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsform != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naeringskode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naeringskode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naeringskode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kommunenummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kommunenummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kommunenummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overordnetEnhet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overordnetEnhet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overordnetEnhet, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraRegistreringsdatoEnhetsregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraRegistreringsdatoEnhetsregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraRegistreringsdatoEnhetsregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilRegistreringsdatoEnhetsregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilRegistreringsdatoEnhetsregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilRegistreringsdatoEnhetsregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrertIMvaregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrertIMvaregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrertIMvaregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (konkurs != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("konkurs") + "=").Append(System.Uri.EscapeDataString(ConvertToString(konkurs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraAntallAnsatte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraAntallAnsatte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraAntallAnsatte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilAntallAnsatte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilAntallAnsatte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilAntallAnsatte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrertIForetaksregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrertIForetaksregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrertIForetaksregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrertIStiftelsesregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrertIStiftelsesregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrertIStiftelsesregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrertIFrivillighetsregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrertIFrivillighetsregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrertIFrivillighetsregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (frivilligRegistrertIMvaregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("frivilligRegistrertIMvaregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(frivilligRegistrertIMvaregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (underTvangsavviklingEllerTvangsopplosning != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("underTvangsavviklingEllerTvangsopplosning") + "=").Append(System.Uri.EscapeDataString(ConvertToString(underTvangsavviklingEllerTvangsopplosning, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (underAvvikling != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("underAvvikling") + "=").Append(System.Uri.EscapeDataString(ConvertToString(underAvvikling, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraStiftelsesdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraStiftelsesdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraStiftelsesdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilStiftelsesdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilStiftelsesdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilStiftelsesdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hjemmeside != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hjemmeside") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hjemmeside, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (institusjonellSektorkode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("institusjonellSektorkode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(institusjonellSektorkode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_kommunenummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.kommunenummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_kommunenummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_postnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.postnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_postnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_poststed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.poststed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_poststed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_landkode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.landkode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_landkode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_adresse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.adresse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_adresse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (forretningsadresse_postnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forretningsadresse.postnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forretningsadresse_postnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (forretningsadresse_poststed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forretningsadresse.poststed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forretningsadresse_poststed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (forretningsadresse_landkode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forretningsadresse.landkode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forretningsadresse_landkode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (forretningsadresse_adresse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forretningsadresse.adresse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forretningsadresse_adresse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sisteInnsendteAarsregnskap != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sisteInnsendteAarsregnskap") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sisteInnsendteAarsregnskap, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Ugyldig foresp\u00f8rsel", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent detaljer om enhet
        /// </remarks>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten - 9 siffer</param>
        /// <returns>Enhet fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Enhet> HentEnhetAsync(string organisasjonsnummer)
        {
            return HentEnhetAsync(organisasjonsnummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent detaljer om enhet
        /// </remarks>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten - 9 siffer</param>
        /// <returns>Enhet fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Enhet> HentEnhetAsync(string organisasjonsnummer, System.Threading.CancellationToken cancellationToken)
        {
            if (organisasjonsnummer == null)
                throw new System.ArgumentNullException("organisasjonsnummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/enheter/{organisasjonsnummer}");
            urlBuilder_.Replace("{organisasjonsnummer}", System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Enhet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Enheten finnes ikke", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Enheten er fjernet", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent alle underenheter
        /// </remarks>
        /// <param name="navn">Filtrer på navn. Sammensatt søk på likhet. Resultat sorteres pr default etter score</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til underenhetene.  Kommaseparert liste med organisasjonsnummer.</param>
        /// <param name="overordnetEnhet">Organisasjonsnummeret til overordnet enhet</param>
        /// <param name="fraAntallAnsatte">Filtrer på fra antall ansatte</param>
        /// <param name="tilAntallAnsatte">Filtrer på til antall ansatte</param>
        /// <param name="registrertIMvaregisteret">Filtrer på om enheten er registrert i Merverdiregisteret</param>
        /// <param name="fraRegistreringsdatoEnhetsregisteret">Filtrer på fra registreringsdato i Enhetsregisteret.</param>
        /// <param name="tilRegistreringsdatoEnhetsregisteret">Filtrer på til registreringsdato i Enhetsregisteret.</param>
        /// <param name="fraOppstartsdato">Tidligste oppstartsdato for enheten</param>
        /// <param name="tilOppstartsdato">Seneste oppstartsdato for enheten</param>
        /// <param name="fraDatoEierskifte">Tidligste registreringsdato for eierskifte</param>
        /// <param name="tilDatoEierskifte">Seneste registreringsdato for eierskifte</param>
        /// <param name="fraNedleggelsesdato">Tidligste nedleggelsesdato for enheten</param>
        /// <param name="tilNedleggelsesdato">Seneste nedleggelsesdato for enheten</param>
        /// <param name="organisasjonsform">Filtrer på organisasjonsformkode. Kommaseparert liste.</param>
        /// <param name="hjemmeside">Enhetens hjemmeside</param>
        /// <param name="postadresse_kommunenummer">Kommunenummer til enhetens postadresse. Kommaseparert liste med kommunenummer på 4 siffer.</param>
        /// <param name="postadresse_postnummer">Postnummeret til enhetens postadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="postadresse_poststed">Poststedet til enhetens postadresse. Fritekst.</param>
        /// <param name="postadresse_landkode">Landkode til enhetens postadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="postadresse_adresse">Adresse til enhetens postadresse. Kommaseparert liste med adresser.</param>
        /// <param name="kommunenummer">Filtrer på kommunenummer 4 siffer.</param>
        /// <param name="beliggenhetsadresse_postnummer">Postnummeret til enhetens beliggenhetsadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="beliggenhetsadresse_poststed">Poststedet til enhetens beliggenhetsadresse. Fritekst.</param>
        /// <param name="beliggenhetsadresse_landkode">Landkode til enhetens beliggenhetsadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="beliggenhetsadresse_adresse">Adresse til enhetens beliggenhetsadresse. Kommaseparert liste med adresser.</param>
        /// <param name="naeringskode">Filtrer på næringskode. Valgfritt nivå. Kommaseparert liste.</param>
        /// <param name="sort">Sorter resultatsett på feltnavn. Merk at navn må sorteres på navn.norwegian</param>
        /// <param name="size">Antall ønskede treff i response. Default verdi er 20. Max dypde (page*size) er 10 000.</param>
        /// <param name="page">Hvilken side som ønskes av resultatsettet. Default verdi er 0. Max dypde (page*size) er 10 000</param>
        /// <returns>Underenheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListUnderenheterAsync(string navn, string organisasjonsnummer, string overordnetEnhet, int? fraAntallAnsatte, int? tilAntallAnsatte, bool? registrertIMvaregisteret, string fraRegistreringsdatoEnhetsregisteret, string tilRegistreringsdatoEnhetsregisteret, string fraOppstartsdato, string tilOppstartsdato, string fraDatoEierskifte, string tilDatoEierskifte, string fraNedleggelsesdato, string tilNedleggelsesdato, string organisasjonsform, string hjemmeside, string postadresse_kommunenummer, string postadresse_postnummer, string postadresse_poststed, string postadresse_landkode, string postadresse_adresse, string kommunenummer, string beliggenhetsadresse_postnummer, string beliggenhetsadresse_poststed, string beliggenhetsadresse_landkode, string beliggenhetsadresse_adresse, string naeringskode, string sort, int? size, int? page)
        {
            return ListUnderenheterAsync(navn, organisasjonsnummer, overordnetEnhet, fraAntallAnsatte, tilAntallAnsatte, registrertIMvaregisteret, fraRegistreringsdatoEnhetsregisteret, tilRegistreringsdatoEnhetsregisteret, fraOppstartsdato, tilOppstartsdato, fraDatoEierskifte, tilDatoEierskifte, fraNedleggelsesdato, tilNedleggelsesdato, organisasjonsform, hjemmeside, postadresse_kommunenummer, postadresse_postnummer, postadresse_poststed, postadresse_landkode, postadresse_adresse, kommunenummer, beliggenhetsadresse_postnummer, beliggenhetsadresse_poststed, beliggenhetsadresse_landkode, beliggenhetsadresse_adresse, naeringskode, sort, size, page, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent alle underenheter
        /// </remarks>
        /// <param name="navn">Filtrer på navn. Sammensatt søk på likhet. Resultat sorteres pr default etter score</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til underenhetene.  Kommaseparert liste med organisasjonsnummer.</param>
        /// <param name="overordnetEnhet">Organisasjonsnummeret til overordnet enhet</param>
        /// <param name="fraAntallAnsatte">Filtrer på fra antall ansatte</param>
        /// <param name="tilAntallAnsatte">Filtrer på til antall ansatte</param>
        /// <param name="registrertIMvaregisteret">Filtrer på om enheten er registrert i Merverdiregisteret</param>
        /// <param name="fraRegistreringsdatoEnhetsregisteret">Filtrer på fra registreringsdato i Enhetsregisteret.</param>
        /// <param name="tilRegistreringsdatoEnhetsregisteret">Filtrer på til registreringsdato i Enhetsregisteret.</param>
        /// <param name="fraOppstartsdato">Tidligste oppstartsdato for enheten</param>
        /// <param name="tilOppstartsdato">Seneste oppstartsdato for enheten</param>
        /// <param name="fraDatoEierskifte">Tidligste registreringsdato for eierskifte</param>
        /// <param name="tilDatoEierskifte">Seneste registreringsdato for eierskifte</param>
        /// <param name="fraNedleggelsesdato">Tidligste nedleggelsesdato for enheten</param>
        /// <param name="tilNedleggelsesdato">Seneste nedleggelsesdato for enheten</param>
        /// <param name="organisasjonsform">Filtrer på organisasjonsformkode. Kommaseparert liste.</param>
        /// <param name="hjemmeside">Enhetens hjemmeside</param>
        /// <param name="postadresse_kommunenummer">Kommunenummer til enhetens postadresse. Kommaseparert liste med kommunenummer på 4 siffer.</param>
        /// <param name="postadresse_postnummer">Postnummeret til enhetens postadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="postadresse_poststed">Poststedet til enhetens postadresse. Fritekst.</param>
        /// <param name="postadresse_landkode">Landkode til enhetens postadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="postadresse_adresse">Adresse til enhetens postadresse. Kommaseparert liste med adresser.</param>
        /// <param name="kommunenummer">Filtrer på kommunenummer 4 siffer.</param>
        /// <param name="beliggenhetsadresse_postnummer">Postnummeret til enhetens beliggenhetsadresse. Kommaseparert liste med postnummer på 4 siffer.</param>
        /// <param name="beliggenhetsadresse_poststed">Poststedet til enhetens beliggenhetsadresse. Fritekst.</param>
        /// <param name="beliggenhetsadresse_landkode">Landkode til enhetens beliggenhetsadresse. Kommaseparert liste med landkoder.</param>
        /// <param name="beliggenhetsadresse_adresse">Adresse til enhetens beliggenhetsadresse. Kommaseparert liste med adresser.</param>
        /// <param name="naeringskode">Filtrer på næringskode. Valgfritt nivå. Kommaseparert liste.</param>
        /// <param name="sort">Sorter resultatsett på feltnavn. Merk at navn må sorteres på navn.norwegian</param>
        /// <param name="size">Antall ønskede treff i response. Default verdi er 20. Max dypde (page*size) er 10 000.</param>
        /// <param name="page">Hvilken side som ønskes av resultatsettet. Default verdi er 0. Max dypde (page*size) er 10 000</param>
        /// <returns>Underenheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListUnderenheterAsync(string navn, string organisasjonsnummer, string overordnetEnhet, int? fraAntallAnsatte, int? tilAntallAnsatte, bool? registrertIMvaregisteret, string fraRegistreringsdatoEnhetsregisteret, string tilRegistreringsdatoEnhetsregisteret, string fraOppstartsdato, string tilOppstartsdato, string fraDatoEierskifte, string tilDatoEierskifte, string fraNedleggelsesdato, string tilNedleggelsesdato, string organisasjonsform, string hjemmeside, string postadresse_kommunenummer, string postadresse_postnummer, string postadresse_poststed, string postadresse_landkode, string postadresse_adresse, string kommunenummer, string beliggenhetsadresse_postnummer, string beliggenhetsadresse_poststed, string beliggenhetsadresse_landkode, string beliggenhetsadresse_adresse, string naeringskode, string sort, int? size, int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/underenheter?");
            if (navn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("navn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(navn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (overordnetEnhet != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("overordnetEnhet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(overordnetEnhet, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraAntallAnsatte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraAntallAnsatte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraAntallAnsatte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilAntallAnsatte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilAntallAnsatte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilAntallAnsatte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (registrertIMvaregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("registrertIMvaregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registrertIMvaregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraRegistreringsdatoEnhetsregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraRegistreringsdatoEnhetsregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraRegistreringsdatoEnhetsregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilRegistreringsdatoEnhetsregisteret != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilRegistreringsdatoEnhetsregisteret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilRegistreringsdatoEnhetsregisteret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraOppstartsdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraOppstartsdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraOppstartsdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilOppstartsdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilOppstartsdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilOppstartsdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraDatoEierskifte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraDatoEierskifte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraDatoEierskifte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilDatoEierskifte != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilDatoEierskifte") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilDatoEierskifte, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fraNedleggelsesdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fraNedleggelsesdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fraNedleggelsesdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tilNedleggelsesdato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tilNedleggelsesdato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tilNedleggelsesdato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsform != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hjemmeside != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hjemmeside") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hjemmeside, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_kommunenummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.kommunenummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_kommunenummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_postnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.postnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_postnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_poststed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.poststed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_poststed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_landkode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.landkode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_landkode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postadresse_adresse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postadresse.adresse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postadresse_adresse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kommunenummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kommunenummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kommunenummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (beliggenhetsadresse_postnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beliggenhetsadresse.postnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beliggenhetsadresse_postnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (beliggenhetsadresse_poststed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beliggenhetsadresse.poststed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beliggenhetsadresse_poststed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (beliggenhetsadresse_landkode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beliggenhetsadresse.landkode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beliggenhetsadresse_landkode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (beliggenhetsadresse_adresse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("beliggenhetsadresse.adresse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(beliggenhetsadresse_adresse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naeringskode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naeringskode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naeringskode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent detaljer om underenhet
        /// </remarks>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til underenheten - 9 siffer</param>
        /// <returns>Underenhet fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> HentUnderenhetAsync(string organisasjonsnummer)
        {
            return HentUnderenhetAsync(organisasjonsnummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent detaljer om underenhet
        /// </remarks>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til underenheten - 9 siffer</param>
        /// <returns>Underenhet fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> HentUnderenhetAsync(string organisasjonsnummer, System.Threading.CancellationToken cancellationToken)
        {
            if (organisasjonsnummer == null)
                throw new System.ArgumentNullException("organisasjonsnummer");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/underenheter/{organisasjonsnummer}");
            urlBuilder_.Replace("{organisasjonsnummer}", System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Underenhet finnes ikke", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Underenhet er fjernet", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent oppdateringer på enheter
        /// </remarks>
        /// <param name="dato">Tidligste tidsstempel for når enheten ble oppdatert. På format Datetime (ISO-8601): yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</param>
        /// <param name="oppdateringsid">Minste oppdateringsid for enhet. Større eller lik 1.</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten. Kommaseparert liste med organisasjonsnummer.</param>
        /// <returns>Oppdateringer på enheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListOppdateringerEnhetAsync(string dato, int? oppdateringsid, string organisasjonsnummer)
        {
            return ListOppdateringerEnhetAsync(dato, oppdateringsid, organisasjonsnummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent oppdateringer på enheter
        /// </remarks>
        /// <param name="dato">Tidligste tidsstempel for når enheten ble oppdatert. På format Datetime (ISO-8601): yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</param>
        /// <param name="oppdateringsid">Minste oppdateringsid for enhet. Større eller lik 1.</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten. Kommaseparert liste med organisasjonsnummer.</param>
        /// <returns>Oppdateringer på enheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListOppdateringerEnhetAsync(string dato, int? oppdateringsid, string organisasjonsnummer, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/oppdateringer/enheter?");
            if (dato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (oppdateringsid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("oppdateringsid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(oppdateringsid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent oppdateringer på underenheter
        /// </remarks>
        /// <param name="dato">Tidligste tidsstempel for når enheten ble oppdatert. På format Datetime (ISO-8601): yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</param>
        /// <param name="oppdateringsid">Minste oppdateringsid for enhet. Større eller lik 1.</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten. Kommaseparert liste med organisasjonsnummer.</param>
        /// <returns>Oppdateringer på underenheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListOppdateringerUnderenhetAsync(string dato, int? oppdateringsid, string organisasjonsnummer)
        {
            return ListOppdateringerUnderenhetAsync(dato, oppdateringsid, organisasjonsnummer, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent oppdateringer på underenheter
        /// </remarks>
        /// <param name="dato">Tidligste tidsstempel for når enheten ble oppdatert. På format Datetime (ISO-8601): yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</param>
        /// <param name="oppdateringsid">Minste oppdateringsid for enhet. Større eller lik 1.</param>
        /// <param name="organisasjonsnummer">Organisasjonsnummeret til enheten. Kommaseparert liste med organisasjonsnummer.</param>
        /// <returns>Oppdateringer på underenheter fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListOppdateringerUnderenhetAsync(string dato, int? oppdateringsid, string organisasjonsnummer, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/oppdateringer/underenheter?");
            if (dato != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dato") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dato, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (oppdateringsid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("oppdateringsid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(oppdateringsid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (organisasjonsnummer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("organisasjonsnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(organisasjonsnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent alle organisasjonsformer
        /// </remarks>
        /// <returns>Organisasjonsformer fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<_Organisasjonsformer> ListOrganisasjonsformerAsync()
        {
            return ListOrganisasjonsformerAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent alle organisasjonsformer
        /// </remarks>
        /// <returns>Organisasjonsformer fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<_Organisasjonsformer> ListOrganisasjonsformerAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organisasjonsformer");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<_Organisasjonsformer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent en enkelt organisasjonsform fra kode
        /// </remarks>
        /// <param name="orgformKode">Kode for organisasjonsform</param>
        /// <returns>Organisasjonsform fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Organisasjonsform> HentOrganisasjonsformAsync(string orgformKode)
        {
            return HentOrganisasjonsformAsync(orgformKode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent en enkelt organisasjonsform fra kode
        /// </remarks>
        /// <param name="orgformKode">Kode for organisasjonsform</param>
        /// <returns>Organisasjonsform fra Enhetsregisteret</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Organisasjonsform> HentOrganisasjonsformAsync(string orgformKode, System.Threading.CancellationToken cancellationToken)
        {
            if (orgformKode == null)
                throw new System.ArgumentNullException("orgformKode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organisasjonsformer/{orgformKode}");
            urlBuilder_.Replace("{orgformKode}", System.Uri.EscapeDataString(ConvertToString(orgformKode, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Organisasjonsform>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Organisasjonsformen eksisterer ikke", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent organisasjonsformer for enheter
        /// </remarks>
        /// <returns>Liste over mulige organisasjonsformer for enheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListOrganisasjonsformerEnheterAsync()
        {
            return ListOrganisasjonsformerEnheterAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent organisasjonsformer for enheter
        /// </remarks>
        /// <returns>Liste over mulige organisasjonsformer for enheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListOrganisasjonsformerEnheterAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organisasjonsformer/enheter");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Hent organisasjonsformer for underenheter
        /// </remarks>
        /// <returns>Liste over mulige organisasjonsformer for underenheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ListOrganisasjonsformerUnderenheterAsync()
        {
            return ListOrganisasjonsformerUnderenheterAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Hent organisasjonsformer for underenheter
        /// </remarks>
        /// <returns>Liste over mulige organisasjonsformer for underenheter</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ListOrganisasjonsformerUnderenheterAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organisasjonsformer/underenheter");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Udefinert feil", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Enhet
    {
        [Newtonsoft.Json.JsonProperty("organisasjonsnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organisasjonsnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("navn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Navn { get; set; }

        [Newtonsoft.Json.JsonProperty("organisasjonsform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Organisasjonsform Organisasjonsform { get; set; }

        [Newtonsoft.Json.JsonProperty("registreringsdatoEnhetsregisteret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistreringsdatoEnhetsregisteret { get; set; }

        [Newtonsoft.Json.JsonProperty("registrertIMvaregisteret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RegistrertIMvaregisteret { get; set; }

        [Newtonsoft.Json.JsonProperty("naeringskode1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naeringskode Naeringskode1 { get; set; }

        [Newtonsoft.Json.JsonProperty("naeringskode2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naeringskode Naeringskode2 { get; set; }

        [Newtonsoft.Json.JsonProperty("naeringskode3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Naeringskode Naeringskode3 { get; set; }

        [Newtonsoft.Json.JsonProperty("antallAnsatte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AntallAnsatte { get; set; }

        [Newtonsoft.Json.JsonProperty("stiftelsedato", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stiftelsedato { get; set; }

        [Newtonsoft.Json.JsonProperty("institusjonellSektorkode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sektorkode InstitusjonellSektorkode { get; set; }

        [Newtonsoft.Json.JsonProperty("registrertIForetaksregisteret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RegistrertIForetaksregisteret { get; set; }

        [Newtonsoft.Json.JsonProperty("registrertIStiftelsesregisteret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RegistrertIStiftelsesregisteret { get; set; }

        [Newtonsoft.Json.JsonProperty("registrertIFrivillighetsregisteret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RegistrertIFrivillighetsregisteret { get; set; }

        [Newtonsoft.Json.JsonProperty("sisteInnsendteAarsregnskap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SisteInnsendteAarsregnskap { get; set; }

        [Newtonsoft.Json.JsonProperty("konkurs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Konkurs { get; set; }

        [Newtonsoft.Json.JsonProperty("underAvvikling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UnderAvvikling { get; set; }

        [Newtonsoft.Json.JsonProperty("underTvangsavviklingEllerTvangsopplosning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UnderTvangsavviklingEllerTvangsopplosning { get; set; }

        [Newtonsoft.Json.JsonProperty("maalform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maalform { get; set; }

        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Naeringskode
    {
        [Newtonsoft.Json.JsonProperty("kode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kode { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sektorkode
    {
        [Newtonsoft.Json.JsonProperty("kode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kode { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _Organisasjonsformer
    {
        [Newtonsoft.Json.JsonProperty("embedded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Organisasjonsformer Embedded { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Organisasjonsformer
    {
        [Newtonsoft.Json.JsonProperty("organisasjonsformer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Organisasjonsform> Organisasjonsformer1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Organisasjonsform
    {
        [Newtonsoft.Json.JsonProperty("kode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kode { get; set; }

        [Newtonsoft.Json.JsonProperty("beskrivelse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Beskrivelse { get; set; }

        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Self _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Self
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Href Self1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Href
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604